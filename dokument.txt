Autode rendi süsteem:

*Loo programm, mis võimaldab kasutajal rentida autosid ja jälgida renditud autode staatust.
Programm peaks võimaldama kasutajal valida rendiauto, sisestada rendiperioodi ning teha broneeringuid.
Rakendus võib kasutada tekstipõhist I/O-d, et kuvada kasutajale rendiinfot ja broneeringute üksikasju.

*Selline struktuur võimaldab teil hallata autode rendi süsteemi, sealhulgas autode lisamist ja eemaldamist,
autode otsimist vastavalt nende saadavusele ning broneeringute loomist ja tühistamist. Lisaks võimaldab
see jälgida renditud autode staatust ja kliendi broneeringuid.

*Liides: Lisavarustus. Kui inimene soovib saab lisada täiendava kütuse, kindlustuse, lasteiste või juhi kaasa?

*Iga sõiduki tüübi jaoks arvutatakse eraldi maksumus konfitsentidega, tunni, päeva ja kuu põhiselt.

*Meetodid:

lisaLisavarustus(lisavarustus): Meetod, mis võimaldab lisavarustuse lisamist sõidukile.

*Tavavautode hinnad tunnikohta jäävad vahemikku 15-25. luksusautod 25-40 ja kaubikud 10-15

*Loeme andmed listi sisse. Kui inimene teeb päringu, siis vastavalt soovile. Väljastab
programm kolm saadaval autot, kasutades randomit. Kui sobivat autot pole saab ta
uuesti kolm genereerida, aga eelmisi enam ei tohi näidata.

*Kujul : Renault ... Või Renault...
        Bmw ...         Bmw...
        Ciat ...        Vabu autosid pole rohkem...

        Kasutajal on võimalik uuesti sisestada genereeri algusest uuesti, kui sobivat ikka ei leidnud.

*Lisaks peab sisestama inimene kas soovib lisavarustust, eeldatav km (kui läheb üle normi siis lisatasu), soovitav rendiaeg.
Võime teha vanusepõhiselt ka mingi suurema riskikalkulatsiooniga hinna.
Meie peaksime talle tagastama lõpuks siis auto, maksumuse ja leping haha?, pangalink, igal autol ka tagatisraha.

*Peaks siis listi ja nimekirja ka uuendama koguaeg nimekirja põhjal. Ühesõnaga saame keerulisemaks teha.
Tagastusmeetod kui auto toodi tagasi.

Asukoha põhised meetodid Tallinn vs Tartu ja lisatransport kui vaja.

-------------------

Programm peab vastama järgmistele tingimustele.

Programm käsitleb mingit (inimlikku) tegevust, näiteks mängimist, kliendile vastamist, kodumasina kasutamist vm. Eriti tore aga oleks, kui programm oleks teile kasulik oma erialaste ülesannete lahendamisel.
Programm peab kasutajalt midagi küsima (võib-olla ka korduvalt). Võib eeldada, et kasutaja sisestab vastuse nõutud kujul.
Programm peaks olema kasutatav ilma, et programmi kohta oleks erilisi eelteadmisi. Küsimused peavad vajaliku info andma. Hea oleks, kui programm käivitamisel annab vajaliku üldtutvustava lühiinfo.
Programm peab sisaldama juhusliku suuruse kasutamist (soovitavalt klassi Random abil). Kui programm on mõeldud näiteks erialaste andmete töötlemiseks, siis võib sellest ka loobuda. Kuigi näiteks sobivas vahemikus juhuslike andmete genereerimine võib olla kasulik programmi testimiseks.
Programm peab koosnema mitmest klassist (sh. peaklass). Andmete kasutamine peaks käima erinevate objektide abil. Selleks loodud klassid peaksid sisaldama isendivälju, konstruktoreid, get- ja set-meetodeid ja teisi vajalikke meetodeid.
Programm peab olema rühmaliikmete endi kirjutatud.
Programm peab olema mõistlikult kommenteeritud.
Programm ei tohiks olla liiga keeruline. Vajadusel konsulteerige praktikumi juhendajaga enne programmeerimist.
Kasutajaga suhtlemine peaks olema väga elementaarselt kujundatud. Vältida (veel) graafilist kasutajaliidest. Ekraanile kuvatav info (ka näiteks mänguseis) võib olla tekstiridadena (System.out.println). Kasutajaga dialoogi võib realiseerida mitmeti. Näiteks klassi Scanner (vt. Praktikum 1) kasutades või alltoodud JOptionPane meetodeid kasutades. Programmi käivitamiseks vajalikku alginfot võib nõuda ka käsurea argumentidena (vt. Nädal 2).
Kasutajaga dialoogi korraldamisel on abiks, kui programmi algusesse, lausa enne klassi kirjelduse algust, panna rida import javax.swing.JOptionPane;
Kohale, kus programm peaks kasutajalt sõne küsima, tuleb panna rida
String sisestatakse = JOptionPane.showInputDialog(null, "Sisesta midagi ", "Andmete sisestamine",
                                                  JOptionPane.QUESTION_MESSAGE);
Täpsemalt saate muidugi APIst vaadata!

Koos programmiga (ja vajalike lisafailidega) tuleb esitada ka oma rühmatöö kirjeldus, kus peavad olema

autorite nimed;
projekti põhjalik kirjeldus, kus on kirjas programmi eesmärk ja selgitus programmi üldisest tööst, vajadusel lühike kasutusjuhis;
iga klassi kohta eraldi selle eesmärk ja olulisemad meetodid;
projekti tegemise protsessi kirjeldus (erinevad etapid ja rühmaliikmete osalemine neis);
iga rühmaliikme panus (sh tehtud klassid/meetodid) ja ajakulu (orienteeruvalt);
tegemise mured (nt millistest teadmistest/oskustest tundsite projekti tegemisel puudust);
hinnang oma töö lõpptulemusele (millega saite hästi hakkama ja mis vajab arendamist);
selgitus ja/või näited, kuidas programmi osi eraldi ja programmi tervikuna testisite ehk kuidas veendusite, et programm töötab korrektselt.
